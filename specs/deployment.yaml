# First, we setup a deployment, which is responsible for deploying pod sfrom
# a template.  The deployment is also responsible for doing application
# rolling-updates.  A deployment will automatically do a rolling update if
# its image URL is updated.
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
  labels:
    app: getting-started
  name: getting-started
  namespace: default
spec:
  # We can set replicas here statically, or you can check out HPAs (horizontal
  # pod autoscaler) to automatically scale your application out with load.
  strategy:
    rollingUpdate:
      maxSurge: 1 # we can make one surplus pod while rolling out updates
      maxUnavailable: 1 # only one pod below the replicas count can be down
    type: RollingUpdate
  selector:
    matchLabels: # these labels must match the pod template used
      app: getting-started
  template:
    metadata:
      labels: # these labels must match the select (matchLabels) of the deployment
        app: getting-started
      namespace: default
    spec:
      affinity: # many types of affinity and anti-affinity are availble - check the docs!
        podAntiAffinity: # avoid pods with settings below
          preferredDuringSchedulingIgnoredDuringExecution: # other options include disallowing scheduling entirely if two pods are on the same node
          - weight: 100 # only used if multiple rules are in place and conflict
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app # this is the key of the label on the pod we want to avoid
                  operator: In
                  values:
                  - getting-started # this is the value of the label on the pod we want to avoid
      containers: # you may have multiple containers that share a hostname and network stack
      - name: nginx
        image: nginx:latest # this is the URL to the docker image to use. docker hub is assumed by default
        env: 
        - name: ENV_VAR
          value: "env var value"
        livenessProbe: # if a liveness probe does not pass, the pod will be removed from the load balancer and eventually restarted
          failureThreshold: 3
          initialDelaySeconds: 2
          periodSeconds: 15
          successThreshold: 1
          tcpSocket:
            port: 80
          timeoutSeconds: 1
        readinessProbe: # if a readiness probe does not pass, the pod will not be put into the load balancer
          failureThreshold: 3
          initialDelaySeconds: 2
          periodSeconds: 15
          successThreshold: 1
          tcpSocket:
            port: 80
          timeoutSeconds: 1
        #args: ["--flag", "here"] # command line arguments
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 50m # millicores are 1/1000 of a full core
            memory: 50Mi # Mi Gi GB and MB are all supported
      restartPolicy: Always
      terminationGracePeriodSeconds: 5 # if sent an interrupt, the pod is allowed up to this long to exit gracefully
